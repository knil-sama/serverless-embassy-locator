AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: S3 bucket to EventBridge to Lambda

Parameters:
  RawBucket:
    Type: String
    Default: raw-embassies
  CleanBucket:
    Type: String
    Default: clean-embassies
  AppName:
    Description: Name of Application
    Type: String
    Default: apigw-http-api-lambda
Resources:
  CrawlerLatestExecution:
    Type: AWS::SSM::Parameter
    Properties:
      Name: crawler-latest-execution
      Description: SSM Parameter value to store latest execution for the crawler lambda function
      Type: String
      Tier: Standard
      Value: "2022-01-01T20:23:23+00:00"
      AllowedPattern: "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\+|-)\\d{2}:\\d{2}$"
      Tags:
        project: "serverless-embassy-locator"
        application: "crawler"

  # Enforce HTTPS only access to S3 bucket #
  BucketSourceForImagePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Sub "${RawBucket}"
      PolicyDocument:
        Statement:
        - Action: s3:*
          Effect: Deny
          Principal: "*"
          Resource:
          - !Sub "arn:aws:s3:::${RawBucket}/*"
          - !Sub "arn:aws:s3:::${RawBucket}"
          Condition:
            Bool:
              aws:SecureTransport: false

  BucketDestinationForImagePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Sub "${CleanBucket}"
      PolicyDocument:
        Statement:
        - Action: s3:*
          Effect: Deny
          Principal: "*"
          Resource:
          - !Sub "arn:aws:s3:::${CleanBucket}/*"
          - !Sub "arn:aws:s3:::${CleanBucket}"
          Condition:
            Bool:
              aws:SecureTransport: false

  CrawlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./target/lambda/crawler_embassy/bootstrap
      Architectures: ["x86_64"] ## can't use arm64 in eu-west-3
      Handler: bootstrap
      Runtime: provided.al2
      MemorySize: 512
      Timeout: 30
      Policies:
        - S3WritePolicy:
            BucketName: !Ref RawBucket
      Events:
        Trigger:
          Type: Schedule
          Properties:
            Schedule: 'cron(0 0 1 * ? *)'
            Name: ServerlessEmbassyScheduleCrawler
            Description: schedule for crawler first day of month
            Enabled: true
      Tags:
        project: "serverless-embassy-locator"
        application: "crawler"
      Environment:
        Variables:
          RUST_BACKTRACE: full
          RUST_LOG: info
          DESTINATION_BUCKET: !Ref RawBucket


  ## Lambda function
  CleanFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./target/lambda/clean_embassy/bootstrap
      Architectures: ["x86_64"] ## can't use arm64 in eu-west-3
      Handler: bootstrap
      Runtime: provided.al2
      MemorySize: 512
      Timeout: 30
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref RawBucket
        - S3WritePolicy:
            BucketName: !Ref CleanBucket
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - "aws.s3"
              detail-type:
                - Object Created
              detail:
                bucket:
                  name:
                    - !Ref RawBucket
      Tags:
        project: "serverless-embassy-locator"
        application: "backend"
      Environment:
        Variables:
          RUST_BACKTRACE: full
          RUST_LOG: info
          SOURCE_BUCKET: !Ref RawBucket
          DESTINATION_BUCKET: !Ref CleanBucket

##########################################################################
#  API Gateway HTTP API                                                  #
##########################################################################
  HttpApi:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: !Ref AppName
      Description: An Amazon API Gateway HTTP API and an AWS Lambda function.
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - GET
          - HEAD
          - OPTIONS
          - POST
      Target: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FilterFunction}/invocations
      Tags:
        project: "serverless-embassy-locator"
        application: "frontend"
##########################################################################
#   Lambda Function                                                      #
##########################################################################
  FilterFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./target/lambda/filter_embassy/bootstrap
      Architectures: ["x86_64"] ## can't use arm64 in eu-west-3
      # Function permissions grant an AWS service or another account permission to use a function
      Handler: bootstrap
      Runtime: provided.al2
      MemorySize: 512
      Timeout: 30
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref CleanBucket
      Environment:
        Variables:
          RUST_BACKTRACE: full
          RUST_LOG: info
          SOURCE_BUCKET: !Ref CleanBucket
      Tags:
        project: "serverless-embassy-locator"
        application: "backend"
  FunctionResourcePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref FilterFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*'

Outputs:
  RawBucketName:
    Value: !Ref RawBucket
    Description: S3 Bucket source for object storage
  CleanBucketName:
    Value: !Ref CleanBucket
    Description: S3 Bucket destination for object storage
  FunctionArn:
    Value: !Ref CleanFunction
    Description: CleanFunction ARN
  HttpApiEndpoint:
    Description: The default endpoint for the HTTP API.
    Value: !GetAtt HttpApi.ApiEndpoint